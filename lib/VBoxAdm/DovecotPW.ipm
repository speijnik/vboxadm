package VBoxAdm::DovecotPW;

use strict;
use warnings;

use MIME::Base64;
use Digest::MD5;
use Digest::Perl::MD5;
use Digest::SHA;
use Crypt::GeneratePassword;

our $VERSION = '@VERSION@';

my %hashlen = (
    'smd5'    => 16,
    'ssha'    => 20,
    'ssha256' => 32,
    'ssha512' => 64,
);

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::plain_md5('pwclear');
# Purpose    : Generate a Plain-MD5 Hash
# Returns    : A Hex encoded MD5 Hash of the input
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub plain_md5 {
    my $pw = shift;
    return "{PLAIN-MD5}" . Digest::MD5::md5_hex($pw);
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::cram_md5('pwclear');
# Purpose    : Generate a intermediate CRAM-MD5 string
# Returns    : A Hex encoded, intermediate CRAM-MD5 string of the input
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes,
# http://www.docunext.com/wiki/Dovecotpw
# Description: This method turns a password into a hash which Dovecot can use
# for CRAM-MD5 as an auth string. This string consists of two 16-byte state arrays
# which are generated by feeding two differntly padded version of the same
# password into the MD5 hash algorithm and recording the (unfinalized) state arrays.
# This intermediate step is used in the HMAC-MD5 algorithm and these resulting contexts
# can be used to initialize MD5 hash objects for authentication of any message.
# Since these context be converted back to the original password (execept brute-force and
# potential design flaws in the MD5 algorithm) they a somewhat safter to store than
# cleartext passwords, which would be the only other option for using CRAM-MD5.
# This code is closely modeled after code written by William K. Cole in 2008.
#
# Since we need to access the internal state array of the MD5 algorithm we can not
# use the fast XS implementation of the Digest::MD5 algorithm which does not export
# this state array.
sub cram_md5 {
    my $pass   = shift;
    my $secret = $pass;

    if ( length $secret > 64 ) {

        # hashing down long password, see RFC2195
        $secret = Digest::Perl::MD5::md5($secret);
    }

    # inner HMAC key, see RFC2104, page 2
    my $ki = "$secret" ^ ( chr(0x36) x 64 );

    # outer HMAC key, see RFC2104, page 2
    my $ko = "$secret" ^ ( chr(0x5c) x 64 );

    my $innermd5 = Digest::Perl::MD5->new;
    $innermd5->add($ki);
    my $ci = pack 'V4', @{ $innermd5->{_state} };

    my $outermd5 = Digest::Perl::MD5->new;
    $outermd5->add($ko);
    my $co = pack 'V4', @{ $outermd5->{_state} };

    my $innerhex = Digest::Perl::MD5::_encode_hex($ci);
    my $outerhex = Digest::Perl::MD5::_encode_hex($co);

    return "{CRAM-MD5}$outerhex$innerhex";
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::plain_md5('pwclear');
# Purpose    : Generate a Base64 encoded MD5 Hash
# Returns    : A Base64 encoded MD5 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub ldap_md5 {
    my $pw = shift;
    return "{LDAP-MD5}" . pad_base64( Digest::MD5::md5_base64($pw) );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::smd5('pwclear','salt');
# Purpose    : Generate a salted MD5 hash
# Returns    : A Base64 encoded, salted MD5 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub smd5 {
    my $pw = shift;
    my $salt = shift || &make_salt();
    return "{SMD5}" . pad_base64( MIME::Base64::encode( Digest::MD5::md5( $pw . $salt ) . $salt, '' ) );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::sha('pwclear');
# Purpose    : Generate a SHA1 hash
# Returns    : A Base64 encoded SHA1 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub sha {
    my $pw = shift;
    return "{SHA}" . MIME::Base64::encode( Digest::SHA::sha1($pw), '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::ssha('pwclear','salt');
# Purpose    : Generate a salted SHA1 hash
# Returns    : A Base64 encoded, salted SHA1 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub ssha {
    my $pw = shift;
    my $salt = shift || &make_salt();
    return "{SSHA}" . MIME::Base64::encode( Digest::SHA::sha1( $pw . $salt ) . $salt, '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::sha256('pwclear');
# Purpose    : Generate a SHA256 hash
# Returns    : A Base64 encoded SHA256 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub sha256 {
    my $pw = shift;
    return "{SHA256}" . MIME::Base64::encode( Digest::SHA::sha256($pw), '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::ssha256('pwclear','salt');
# Purpose    : Generate a salted SHA256 hash
# Returns    : A Base64 encoded, salted SHA256 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub ssha256 {
    my $pw = shift;
    my $salt = shift || &make_salt();
    return "{SSHA256}" . MIME::Base64::encode( Digest::SHA::sha256( $pw . $salt ) . $salt, '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::sha512('pwclear');
# Purpose    : Generate a SHA512 hash
# Returns    : A Base64 encoded SHA512 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub sha512 {
    my $pw = shift;
    return "{SHA512}" . MIME::Base64::encode( Digest::SHA::sha512($pw), '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::ssha512('pwclear','salt');
# Purpose    : Generate a salted SHA512 hash
# Returns    : A Base64 encoded, salted SHA512 hash
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub ssha512 {
    my $pw = shift;
    my $salt = shift || &make_salt();
    return "{SSHA512}" . MIME::Base64::encode( Digest::SHA::sha512( $pw . $salt ) . $salt, '' );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::make_pass('pwclear','pwscheme','salt');
# Purpose    : Generate any supported hash
# Returns    : the hash or cleartext of the password
# Parameters : the password, the scheme and the salt
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub make_pass {
    my $pw     = shift;
    my $scheme = shift;
    $scheme = lc($scheme);
    $scheme =~ s/-/_/g;
    my $salt = shift || &make_salt();
    if ( $scheme eq 'ldap_md5' ) {
        return &ldap_md5($pw);
    }
    elsif ( $scheme eq 'plain_md5' ) {
        return &plain_md5($pw);
    }
    elsif ( $scheme eq 'sha' ) {
        return &sha($pw);
    }
    elsif ( $scheme eq 'sha256' ) {
        return &sha256($pw);
    }
    elsif ( $scheme eq 'sha512' ) {
        return &sha512($pw);
    }
    elsif ( $scheme eq 'smd5' ) {
        return &smd5( $pw, $salt );
    }
    elsif ( $scheme eq 'ssha' ) {
        return &ssha( $pw, $salt );
    }
    elsif ( $scheme eq 'ssha256' ) {
        return &ssha256( $pw, $salt );
    }
    elsif ( $scheme eq 'ssha512' ) {
        return &ssha512( $pw, $salt );
    }
    elsif ( $scheme eq 'cram_md5' ) {
        return &cram_md5($pw);
    }
    else {
        return "{CLEARTEXT}" . $pw;
    }
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::make_salt();
# Purpose    : generate a random salt
# Returns    : a random salt
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub make_salt {
    return Crypt::GeneratePassword::word( 8, 12 );
}

# This does not always whats expected.
sub _make_salt {
    my $len   = 8 + int( rand(8) );
    my @bytes = ();
    for my $i ( 1 .. $len ) {
        push( @bytes, rand(255) );
    }
    return pack( 'C*', @bytes );
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::pad_base64('pwclear');
# Purpose    : perform base64 padding
# Returns    : a padded base64 string
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
# this method was copied from some module on CPAN, I just don't remember which one right now
sub pad_base64 {
    my $b64_digest = shift;
    while ( length($b64_digest) % 4 ) {
        $b64_digest .= '=';
    }
    return $b64_digest;
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::verify_pass('pwclear','pwentry');
# Purpose    : ????
# Returns    : ????
# Parameters : ????
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub verify_pass {

    # cleartext password
    my $pass = shift;

    # hashed pw from db
    my $pwentry = shift;

    my ( $pwscheme, undef, $salt ) = &split_pass($pwentry);

    my $passh = &make_pass( $pass, $pwscheme, $salt );

    if ( $pwentry eq $passh ) {
        return 1;
    }
    else {
        return;
    }
}

############################################
# Usage      : my $hash = VBoxAdm::DovecotPW::plain_md5('pwclear');
# Purpose    : ????
# Returns    : ????
# Parameters : ????
# Throws     : no exceptions
# Comments   : none
# See Also   : http://wiki.dovecot.org/Authentication/PasswordSchemes
sub split_pass {
    my $pw       = shift;
    my $pwscheme = 'cleartext';

    # get use password scheme and remove leading block
    if ( $pw =~ s/^\{([^}]+)\}// ) {
        $pwscheme = lc($1);

        # turn - into _ so we can feed pwscheme to make_pass
        $pwscheme =~ s/-/_/g;
    }

    # We have 3 major cases:
    # 1 - cleartext pw, return pw and empty salt
    # 2 - hashed pw, no salt
    # 3 - hashed pw with salt
    if ( !$pwscheme || $pwscheme eq 'cleartext' || $pwscheme eq 'plain' ) {
        return ( 'cleartext', $pw, '' );
    }
    elsif ( $pwscheme =~ m/^(plain_md5|ldap_md5|cram_md5|md5|sha|sha256|sha512)$/i ) {
        $pw = MIME::Base64::decode($pw);
        return ( $pwscheme, $pw, '' );
    }
    elsif ( $pwscheme =~ m/^(smd5|ssha|ssha256|ssha512)/ ) {

        # now get hashed pass and salt
        # hashlen can be computed by doing
        # $hashlen = length(Digest::*::digest('string'));
        my $hashlen = $hashlen{$pwscheme};

        # pwscheme could also specify an encoding
        # like hex or base64, but right now we assume its b64
        $pw = MIME::Base64::decode($pw);

        # unpack byte-by-byte, the hash uses the full eight bit of each byte,
        # the salt may do so, too.
        my @tmp  = unpack( 'C*', $pw );
        my $i    = 0;
        my @hash = ();

        # the salted hash has the form: $saltedhash.$salt,
        # so the first bytes (# $hashlen) are the hash, the rest
        # is the variable length salt
        while ( $i < $hashlen ) {
            push( @hash, shift(@tmp) );
            $i++;
        }

        # as I've said: the rest is the salt
        my @salt = ();
        foreach my $ele (@tmp) {
            push( @salt, $ele );
            $i++;
        }

        # pack it again, byte-by-byte
        my $pw   = pack( 'C' . $hashlen, @hash );
        my $salt = pack( 'C*',           @salt );

        return ( $pwscheme, $pw, $salt );
    }
    else {

        # unknown pw scheme
        return;
    }
}

1;

__END__

=head1 NAME

VBoxAdm::DovecotPW - Generate hashed passwords for use with Dovecot SASL.

=head1 VERSION

This documentation refers to VBoxAdm::DovecotPW version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::DovecotPW;

=head1 DESCRIPTION

This module offers various password generation methods for the VBoxAdm suite.

=head1 SUBROUTINES/METHODS

=head2 cram_md5

TODO

=head2 ldap_md5

TODO

=head2 make_pass

TODO

=head2 make_salt

TODO

=head2 pad_base64

TODO

=head2 plain_md5

TODO

=head2 sha

TODO

=head2 sha256

TODO

=head2 sha512

TODO

=head2 smd5

TODO

=head2 split_pass

TODO

=head2 ssha

TODO

=head2 ssha256

TODO

=head2 ssha512

TODO

=head2 verify_pass

TODO

=head1 CONFIGURATION AND ENVIRONMENT

None.

=head1 DEPENDENCIES

None.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS
There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
