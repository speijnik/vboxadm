package VBoxAdm::Frontend;

use base 'CGI::Application';

use strict;
use warnings;

use CGI::Carp qw(fatalsToBrowser);

# Neede for database connection
use CGI::Application::Plugin::DBH (qw/dbh_config dbh/);

use CGI::Application::Plugin::Redirect;

# http://search.cpan.org/~ceeshek/CGI-Application-Plugin-Session-1.03/lib/CGI/Application/Plugin/Session.pm
use CGI::Application::Plugin::Session;

# http://search.cpan.org/~ceeshek/CGI-Application-Plugin-TT-1.05/lib/CGI/Application/Plugin/TT.pm
use CGI::Application::Plugin::TT;

# http://search.cpan.org/~dhorne/CGI-Application-Plugin-RequireSSL-0.04/lib/CGI/Application/Plugin/RequireSSL.pm
use CGI::Application::Plugin::RequireSSL;

# http://search.cpan.org/~silasmonk/CGI-Application-Plugin-Authentication-0.18/lib/CGI/Application/Plugin/Authentication.pm
use CGI::Application::Plugin::Authentication;

use Config::Std;
use Crypt::GeneratePassword;
use DBI;
use Data::Password;
use Sys::Syslog;
use Data::Page;
use Readonly;
use HTML::Clean;

use VBoxAdm::Utils '@VERSION@';
use VBoxAdm::L10N '@VERSION@';
use VBoxAdm::DovecotPW '@VERSION@';

our $VERSION = '@VERSION@';

Readonly my $ENTRIES_PER_PAGE => 20;

############################################
# Usage      : Invoked by CGIApp
# Purpose    : Setup the Application
# Returns    : Nothing
# Parameters : None
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub setup {
    my $self = shift;

    # define the default run mode
    $self->start_mode('public_login');

    # define the mappings between the rm parameter and the actual sub
    $self->run_modes(

        #
        # Public
        #
        'public_login' => 'show_login',

        #
        # Private
        #

        # General
        'welcome' => 'show_welcome',

        # Domains
        'domains'       => 'show_domains',
        'domain'        => 'show_domain',
        'create_domain' => 'show_create_domain',
        'add_domain'    => 'show_add_domain',
        'remove_domain' => 'show_remove_domain',

        # no need for 'edit_domain', we can only change is_active anyway
        'update_domain' => 'show_update_domain',

        # Domain Aliases
        'domain_aliases'      => 'show_domain_aliases',
        'create_domain_alias' => 'show_create_domain_alias',
        'add_domain_alias'    => 'show_add_domain_alias',
        'remove_domain_alias' => 'show_remove_domain_alias',
        'edit_domain_alias'   => 'show_edit_domain_alias',
        'update_domain_alias' => 'show_update_domain_alias',

        # Aliases
        'aliases'      => 'show_aliases',
        'create_alias' => 'show_create_alias',
        'add_alias'    => 'show_add_alias',
        'remove_alias' => 'show_remove_alias',
        'edit_alias'   => 'show_edit_alias',
        'update_alias' => 'show_update_alias',

        # Mailboxes
        'mailboxes'      => 'show_mailboxes',
        'create_mailbox' => 'show_create_mailbox',
        'add_mailbox'    => 'show_add_mailbox',
        'remove_mailbox' => 'show_remove_mailbox',
        'edit_mailbox'   => 'show_edit_mailbox',
        'update_mailbox' => 'show_update_mailbox',

        # Broadcast
        'broadcast'      => 'show_broadcast',
        'send_broadcast' => 'show_send_broadcast',

        # Vacation Blacklist
        'vac_bl'        => 'show_vacation_blacklist',
        'create_vac_bl' => 'show_create_vacbl_entry',
        'add_vac_bl'    => 'show_add_vacbl_entry',
        'remove_vac_bl' => 'show_remove_vacbl_entry',

        # Auto-Whitelist
        'awl'        => 'show_awl',
        'update_awl' => 'show_update_awl',

        # Log
        'log' => 'show_log',

        # Admins
        'admins' => 'show_admins',

        # API
        'api' => 'show_api',
    );

    # Authentication
    # Setup authentication using CGI::Application::Plugin::Authentication
    # Since we want to be able to support salted passwords, this is a bit messy.
    #
    # Contraints:
    # Only users who are either superadmin or domainadmin should be able to login
    # and their account (= mailbox) must be active. Furthermore the username is
    # local_part@domain but those are stored in two different tables. So
    # we need to join those tables by specifying two tables and CONCAT the
    # fields together.
    #
    # Since the plugin does not support OR contraints we have to work around that issue.
    # In doubt I suggest to have a look the source code of the plugin.
    #
    # Filters:
    # The filter receives the user supplied password and the content of the column it is
    # applied to, extracts the pwscheme and salt, hashes the user supplied pass and returns
    # the password hash computed with the old salt and pwscheme. The plugin compares
    # the result with the unmodified column entry.
    $self->authen->config(
        DRIVER => [
            'DBI',
            TABLES      => [ 'mailboxes', 'domains' ],
            CONSTRAINTS => {
                "CONCAT(mailboxes.local_part,'\@',domains.name)" => '__CREDENTIAL_1__',
                'mailboxes.is_active'                            => '1',
                'domains.is_active'                              => '1',

                # WARNING: This contraint relies on an implementation detail of Plugin::Authentication!
                # This is bad style, but there is no other way right now.
                '(mailboxes.is_superadmin OR mailboxes.is_domainadmin) AND 1' => '1',
            },
            COLUMNS => { 'dovecotpw:mailboxes.password' => '__CREDENTIAL_2__', },
            FILTERS => {
                'dovecotpw' => sub {

                    # since we may use salted passwords, we have to do our own
                    # password verification. a simple string eq would not do.
                    my $param   = shift;    # unused, always empty
                    my $plain   = shift;    # password from user
                    my $pwentry = shift;    # password hash from db
                    my ( $pwscheme, undef, $salt ) = &VBoxAdm::DovecotPW::split_pass($pwentry);
                    my $passh = &VBoxAdm::DovecotPW::make_pass( $plain, $pwscheme, $salt );
                    return $passh;
                },
            }
        ],
        LOGOUT_RUNMODE      => 'public_login',
        LOGIN_RUNMODE       => 'public_login',
        POST_LOGIN_CALLBACK => \&post_login_callback,
    );

    # only enable authen if called as CGI, this helps with testing and debugging from the commandline
    if ( !$self->is_shell() ) {
        $self->authen->protected_runmodes(qr/^(?!public_|api)/);
    }

    #
    # Configuration
    #
    # Valid config file locations to try
    my @conffile_locations = qw(
      vboxadm.conf
      conf/vboxadm.conf
      /etc/vboxadm/vboxadm.conf
    );

    # if the application if run as a FastCGI app, the server might
    # provide an additional configuration location. if the points to file
    # add it to the list of possible locations
    if ( -f $ENV{CGIAPP_CONFIG_FILE} ) {
        unshift( @conffile_locations, $ENV{CGIAPP_CONFIG_FILE} );
    }

    my ( %config, $conffile_used );

    # Try all config file locations
    foreach my $loc (@conffile_locations) {
        if ( -r $loc ) {
            $conffile_used = $loc;
            read_config $loc => %config;
            last;
        }
    }
    if ( !$conffile_used ) {
        syslog( 2, "setup - Warning: No config file found!" );
    }
    $self->{config} = \%config;

    #
    # Database
    #
    my $user = $config{'default'}{'dbuser'} || 'root';
    my $pass = $config{'default'}{'dbpass'} || 'root';
    my $db   = $config{'default'}{'dbdb'}   || 'vboxadm';
    my $port = $config{'default'}{'dbport'} || 3306;
    my $host = $config{'default'}{'dbhost'} || 'localhost';
    my $dsn  = "DBI:mysql:database=$db;user=$user;password=$pass;host=$host;port=$port";
    $self->{base_url}     = $config{'cgi'}{'base_url'}     || '/cgi-bin/vboxadm.pl';
    $self->{media_prefix} = $config{'cgi'}{'media_prefix'} || '';

    # Connect to DBI database, same args as DBI->connect();
    # uses connect_cached for persistent connections
    # this should have no effect for CGI and speed up FastCGI
    $self->dbh_config(
        sub {
            DBI->connect_cached(
                $dsn, undef, undef,
                {
                    PrintError => 0,
                    RaiseError => 0,
                }
            );
        }
    ) or syslog( 2, "setup - Failed to establish DB connection!" );

    # Prepare connection for UTF-8
    # Scripts, Database, Sourcecode, Userdata ... everything should be in UTF-8
    # the only point were we could deal with non-UTF-8 is when we output data to
    # non-utf-8 capable browsers (are there any?)
    $self->dbh->do("SET NAMES utf8")
      or syslog( 2, "setup - Failed to set DB connection to UTF-8!" );

    #
    # L10N
    #
    # the user handle, will try to determine the appropriate language ... look at the docs of Locale::Maketext
    $self->{lh} = VBoxAdm::L10N->get_handle();

    # this handle is used for logging. logged messages should always be in english
    $self->{lh_en} = VBoxAdm::L10N->get_handle('en');

    #
    # Templating unsing the Template Toolkit
    #
    # Filters:
    # Have a look at the docs of the tt for info on dynamic filters.
    # Short version: they allow filters with more than one argument.
    # highlight provides syntax highlightning for the search
    # l10n provides localization via Locale::Maketext
    $self->tt_config(
        TEMPLATE_OPTIONS => {
            INCLUDE_PATH => [ 'tpl', '../tpl', '/usr/lib/vboxadm/tpl' ],
            POST_CHOMP   => 1,
            FILTERS      => {
                'currency' => sub { sprintf( '%0.2f', @_ ) },

                # dynamic filter factory, see TT manpage
                'highlight' => [
                    sub {
                        my ( $context, $search ) = @_;

                        return sub {
                            my $str = shift;
                            if ($search) {
                                $str =~ s/($search)/<span class='hilighton'>$1<\/span>/g;
                            }
                            return $str;
                          }
                    },
                    1
                ],

                # A localization filter. Turn the english text into the localized counterpart using Locale::Maketext
                'l10n' => [
                    sub {
                        my ( $context, @args ) = @_;

                        return sub {
                            my $str = shift;
                            return $self->{lh}->maketext( $str, @args );
                          }
                    },
                    1,
                ],
            }
        }
    );
    $self->tt_params( base_url     => $self->{base_url} );
    $self->tt_params( media_prefix => $self->{media_prefix} );

    # to make perlcritic happy
    return 1;
}

sub teardown {
    my $self = shift;

    # Disconnect when done
    $self->dbh->disconnect();

    # Close log
    closelog();

    # to make perlcritic happy
    return 1;
}

#
# CGI::Application Hooks
#
sub cgiapp_init {
    my $self = shift;

    # Everything should be in UTF-8!
    $self->query->charset('UTF-8');

    # Set up syslog
    openlog( 'VBoxAdm/Frontend', 'ndelay,nofatal', 'mail' );

    # Configure RequireSSL
    my $ignore_ssl_check = 0;
    if ( $self->is_shell() || $self->is_localnet() || $self->{config}{'cgi'}{'no_ssl'} ) {
        $ignore_ssl_check = 1;
    }

    $self->config_requiressl(
        'keep_in_ssl'  => 1,
        'ignore_check' => $ignore_ssl_check,
    );

    # to make perlcritic happy
    return 1;
}

#
# Template::Toolkit Hooks
#

# during post processing minify html
sub tt_post_process {
    my $self    = shift;
    my $htmlref = shift;

    # clean up the resulting HTML
    my $h = HTML::Clean->new($htmlref);
    $h->strip;
    my $newref = $h->data;
    $$htmlref = $$newref;
    return;
}

# pre processing set commonly used variables for the templates
sub tt_pre_process {
    my ( $self, $file, $vars ) = @_;
    $vars->{username}       = $self->authen->username;
    $vars->{system_domain}  = $self->{config}{'default'}{'domain'} || 'localhost';
    $vars->{version}        = $VERSION;
    $vars->{messages}       = $self->get_messages();
    $vars->{is_superadmin}  = $self->is_superadmin();
    $vars->{is_domainadmin} = $self->is_domainadmin();
    return;
}

#
# Misc. private Subs
#

############################################
# Usage      : $self->log('message');
# Purpose    : Log a message to the log table and syslog
# Returns    : true on success
# Parameters : a string
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub log {
    my $self = shift;
    my $msg  = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    if ($msg) {
        syslog( 2, $msg );
        my $query = "INSERT INTO log (ts,msg) VALUES(NOW(),?)";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'log - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute($msg) ) {
            $sth->finish();
            return 1;
        }
        else {
            syslog( 2, 'log - Could not execute Query: %s, Args: %s, Error: %s', $query, $msg, $sth->errstr );
            $sth->finish();
            return;
        }
    }
    else {
        return;
    }
}

############################################
# Usage      : called by Authentication plugin after successfull login
# Purpose    : log login and setup user env.
# Returns    : always true
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub post_login_callback {
    my $self = shift;

    # setup users session, i.e. is he superadmin, domainadmin,
    # get domain id, mailbox id, ip, ...
    $self->get_user_details();
    $self->log_login();

    return 1;
}

############################################
# Usage      : $self->log_login();
# Purpose    : convenience method for logging a user login event
# Returns    : always true
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub log_login {
    my $self = shift;
    return unless ( $self->authen->is_authenticated );
    $self->log( "User " . $self->authen->username . " logged in." );
    return 1;
}

############################################
# Usage      : $self->add_message('warning','message');
# Purpose    : Add a message to the notification message stack
# Returns    : always true
# Parameters : the type and the message
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
# add entry to notify
sub add_message {
    my $self       = shift;
    my $type       = shift;
    my $msg        = shift;
    my $notify_ref = $self->session->param('notify') || [];
    if ( ref($notify_ref) ne 'ARRAY' ) {
        $notify_ref = [];
    }
    push( @{$notify_ref}, { 'type' => $type, 'text' => $msg, } );
    $self->session->param( 'notify', $notify_ref );
    return 1;
}

############################################
# Usage      : $self->get_messages();
# Purpose    : Return all messages from the message stack and remove them
# Returns    : a hashref w/ the messages by priority
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
# get and reset notify
sub get_messages {
    my $self = shift;
    return if $self->session->is_empty();
    my $notify_ref = $self->session->param('notify');
    $self->session->param( 'notify', {} );
    return $notify_ref;
}

############################################
# Usage      : $self->peek_message();
# Purpose    : Return the message stack w/o removing the messages
# Returns    : a hashref w/ the message by priority
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
# get notify (no reset)
sub peek_message {
    my $self       = shift;
    my $notify_ref = $self->session->param('notify');
    return $notify_ref;
}

############################################
# Usage      : $self->is_shell()
# Purpose    : is the script run from a shell?
# Returns    : true if no CGI
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub is_shell {
    my $self = shift;
    if ( $ENV{'DISPLAY'} && $ENV{'PS1'} && $ENV{'SHELL'} && $ENV{'USER'} ) {
        if (   $ENV{'DOCUMENT_ROOT'}
            || $ENV{'GATEWAY_INTERFACE'}
            || $ENV{'HTTP_HOST'}
            || $ENV{'REMOTE_ADDR'}
            || $ENV{'REQUEST_METHOD'}
            || $ENV{'SERVER_SOFTWARE'} )
        {
            return;
        }
        else {
            return 1;
        }
    }
    else {
        return;
    }
}

############################################
# Usage      : $self->is_localnet()
# Purpose    : tell if the user is on a local, i.e. somewhat trusted, network
# Returns    : true if localnet or shell
# Parameters : none
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub is_localnet {
    if ( !$ENV{'REMOTE_ADDR'} ) {
        return 1;    # shell, coz' local
    }
    else {
        if ( $ENV{'REMOTE_ADDR'} =~ m/^(192\.168|172\.(1[6-9]|2\d|3[0-1])|10)\./ ) {
            return 1;
        }
        else {
            return;
        }
    }
}

############################################
# Usage      : $self->is_domainadmin();
# Purpose    : tell if the user is a domainadmin
# Returns    :
# Parameters :
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub is_domainadmin {
    my $self = shift;

    return if $self->session->is_empty();

    if ( defined( $self->session->param('user_is_domainadmin') ) ) {
        return $self->session->param('user_is_domainadmin');
    }

    my ( undef, undef, undef, $is_domainadmin ) = $self->get_user_details();

    if ($is_domainadmin) {
        return 1;
    }
    else {
        return;
    }
}

############################################
# Usage      : $self->is_superadmin();
# Purpose    : tell if the user is a superadmin
# Returns    :
# Parameters :
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub is_superadmin {
    my $self = shift;

    return if $self->session->is_empty();

    if ( defined( $self->session->param('user_is_superadmin') ) ) {
        return $self->session->param('user_is_superadmin');
    }

    my ( undef, undef, $is_superadmin, undef ) = $self->get_user_details();

    if ($is_superadmin) {
        return 1;
    }
    else {
        return;
    }
}

############################################
# Usage      : $self->get_user_details();
# Purpose    : Prefill the session with the essential information about this user.
# Returns    : Mailbox-ID, Domain-ID, Superadmin- and Domainadmin- Flag.
# Parameters : n/a (taken from session/auth-obj.)
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub get_user_details {
    my $self = shift;

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT m.id,m.domain_id,m.is_superadmin,m.is_domainadmin FROM ";
    $query .= "mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE CONCAT(m.local_part,'\@',d.name) = ?";
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'get_user_details - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute( $self->authen->username )
      or syslog( 2, 'get_user_details - Could not prepare Query: %s, Args: %s', $query, $self->authen->username );
    my ( $mailbox_id, $domain_id, $is_superadmin, $is_domainadmin ) = $sth->fetchrow_array();
    $sth->finish();

    $self->session->param( 'user_mailbox_id',     $mailbox_id );
    $self->session->param( 'user_domain_id',      $domain_id );
    $self->session->param( 'user_is_superadmin',  $is_superadmin );
    $self->session->param( 'user_is_domainadmin', $is_domainadmin );

    return ( $mailbox_id, $domain_id, $is_superadmin, $is_domainadmin );
}

############################################
# Usage      : my $domain_id = $self->get_users_domainind();
# Purpose    : Get the domain id of the currently logged in user.
# Returns    :
# Parameters :
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub get_users_domainid {
    my $self = shift;

    if ( defined( $self->session->param('user_domain_id') ) ) {
        return $self->session->param('user_domain_id');
    }

    my ( undef, $domain_id, undef, undef ) = $self->get_user_details();

    return $domain_id;
}

############################################
# Usage      :
# Purpose    : Get the mailbox id of the currently logged in user.
# Returns    :
# Parameters :
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub get_users_mailboxid {
    my $self = shift;

    if ( defined( $self->session->param('user_mailbox_id') ) ) {
        return $self->session->param('user_mailbox_id');
    }

    my ( $mailbox_id, undef, undef, undef ) = $self->get_user_details();

    return $mailbox_id;
}

############################################
# Usage      :
# Purpose    : Return the domain name to a given domain id.
# Returns    :
# Parameters :
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub get_domain_byid {
    my $self      = shift;
    my $domain_id = shift;

    my $query = "SELECT name FROM domains WHERE id = ?";

    # Get our database connection
    my $dbh = $self->dbh();

    my $sth = $dbh->prepare($query)
      or syslog( 2, 'get_domain_byid - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute($domain_id)
      or syslog( 2, 'get_domain_byid - Could not execute Query: %s, Args: %s, Error: %s', $query, $domain_id, $sth->errstr );

    my $domain = $sth->fetchrow_array() || '';
    $sth->finish();
    return $domain;
}

#
# Public
#

sub show_login {
    my $self = shift;

    $self->session_delete();

    my %params = (
        title        => $self->{lh}->maketext('VBoxAdm Login'),
        nonavigation => 1,
    );

    return $self->tt_process( 'login.tpl', \%params );
}

sub show_api {
    my $self = shift;

    # TODO implement the API here
    # Warning: every method accessible through
    # the API must be protected on its own since the api runmode
    # is public.

    # TODO as a first step allow the vacation responder to be
    # set via the API

    # ?rm=api&version=1&action=update_mailbox&vacation_start=x&vacation_end=y&apikey=DEADBEEF
    # apikey really is sha256(querystring w/o apikey + secret apikey)

    # Get CGI Query object
    my $q = $self->query();

    my $api_version = $q->param('version');

    my $str = "API\n";
    $str .= "Version: $api_version\n";

    if ( $api_version == 1 ) {

        #&VBoxAdm::API::handle_v1($self);    # TODO move to VBoxAdm::API
        my $action = $q->param('action');
        my $apikey = $q->param('apikey');    # TODO verfiy API key
        if ( !$action ) {
            $self->header_add( -status => 400 );
            return $str;
        }
        if ( $action eq 'update_mailbox' ) {
            my $vacation_start = $q->param('vacation_start');
            my $vacation_end   = $q->param('vacation_end');

            # TODO add other opts here
            my $local_part = $q->param('local_part');
            my $domain     = $q->param('domain');
            &VBoxAdm::API::mailbox_update(
                'local_part'     => $local_part,
                'domain'         => $domain,
                'vacation_start' => $vacation_start,
                'vacation_end'   => $vacation_end,
            ) or $self->header_add( -status => 400 );
        }
    }
    else {
        $self->header_add( -status => 400 );
    }

    return $str;
}

#
# Private
#

#
# General / Misc.
#
sub show_welcome {
    my $self = shift;

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Overview'),
        'current' => 'welcome',
    );

    return $self->tt_process( 'welcome.tpl', \%params );
}

#
# Broadcast
#
# Show the broadcast form
sub show_broadcast {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT COUNT(*) FROM mailboxes WHERE is_active";
    my $sth   = $dbh->prepare($query);
    $sth->execute();
    my $count = $sth->fetchrow_array();
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Send Broadcast'),
        'current' => 'broadcast',
        'count'   => $count,
    );

    return $self->tt_process( 'broadcast.tpl', \%params );
}

# Send the broadcast message and show confirmation page
sub show_send_broadcast {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $subject = $q->param('subject');
    my $message = $q->param('message');

    my $system_domain = $self->{config}{'default'}{'domain'} || 'localhost';

    my $query = "SELECT m.local_part,d.name FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.is_active AND d.is_active";
    my $sth   = $dbh->prepare($query);
    $sth->execute();
    my $num_sent = 0;
    while ( my ( $local_part, $domain_name ) = $sth->fetchrow_array() ) {
        my $email = $local_part . '@' . $domain_name;
        my $emsg  = '';
        $emsg .= "Subject: " . $subject . "\r\n";
        $emsg .= "Auto-Submitted: auto-generated\r\n";
        $emsg .= "From: VBoxAdm <vboxadm\@" . $system_domain . ">\r\n";
        $emsg .= "To: <" . $email . ">\r\n";
        $emsg .= "\r\n";
        $emsg .= $message;
        &VBoxAdm::Utils::sendmail( 'vboxadm@' . $system_domain, $emsg );
        $num_sent++;
    }
    $sth->finish();

    my %params = (
        'title'    => $self->{lh}->maketext('VBoxAdm Sent Broadcast'),
        'current'  => 'broadcast',
        'num_sent' => $num_sent,
    );

    return $self->tt_process( 'broadcast-result.tpl', \%params );
}

#
# Domains
#

sub show_domains {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my $query = "SELECT id,name,is_active,";
    $query .= "(SELECT COUNT(*) FROM aliases WHERE domain_id = domains.id) AS num_aliases,";
    $query .= "(SELECT COUNT(*) FROM mailboxes WHERE domain_id = domains.id) AS num_mailboxes,";
    $query .= "(SELECT COUNT(*) FROM domain_aliases WHERE domain_id = domains.id) AS num_domainaliases";
    $query .= " FROM domains";
    my $query_where = ' WHERE 1 ';
    my @args        = ();
    if ($search) {
        $query_where .= "AND (name LIKE ?) ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
    }
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query_where .= "AND a.domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }
    $query .= $query_where . " ORDER BY name";

    my $sth = $dbh->prepare( 'SELECT COUNT(*) FROM domains' . $query_where )
      or syslog( 2, 'show_domains - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_domains - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    $sth = $dbh->prepare( $query . ' LIMIT ?, ?' )
      or syslog( 2, 'show_domains - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_domains - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains,
            { id => $row[0], name => $row[1], is_active => $row[2], num_aliases => $row[3], num_mailboxes => $row[4], num_domainaliases => $row[5], } );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Domains'),
        'current' => 'domains',
        'domains' => \@domains,
        'search'  => $search,
        'page'    => $pager,
    );

    return $self->tt_process( 'domains.tpl', \%params );
}

sub show_domain {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_id = $q->param('domain_id') || undef;

    if ( !$domain_id || $domain_id !~ m/^\d+$/ ) {
        my $msg = "Invalid Domain-ID.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $msg );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    my $sql = undef;
    my $sth = undef;

    # Get Domain name
    $sql = "SELECT name FROM domains WHERE id = ?";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain_id);
    my $domain_name = $sth->fetchrow_array();
    $sth->finish();

    # Get Aliases
    $sql = "SELECT id,local_part,goto,is_active FROM aliases WHERE domain_id = ? ORDER BY local_part";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain_id);
    my @aliases = ();
    while ( my ( $id, $local_part, $goto, $is_active ) = $sth->fetchrow_array() ) {
        push( @aliases, { id => $id, local_part => $local_part, 'goto' => $goto, is_active => $is_active, } );
    }
    $sth->finish();

    # Get Mailboxes
    $sql = "SELECT id,local_part,name,is_active FROM mailboxes WHERE domain_id = ? ORDER BY local_part";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain_id);
    my @mailboxes = ();
    while ( my ( $id, $local_part, $name, $is_active ) = $sth->fetchrow_array() ) {
        push( @mailboxes, { id => $id, local_part => $local_part, name => $name, is_active => $is_active, } );
    }
    $sth->finish();

    # Get Domain Aliases
    $sql = "SELECT id,name,is_active FROM domain_aliases WHERE domain_id = ? ORDER BY name";
    $sth = $dbh->prepare($sql);
    $sth->execute($domain_id);
    my @domain_aliases = ();
    while ( my ( $id, $name, $is_active ) = $sth->fetchrow_array() ) {
        push( @domain_aliases, { id => $id, name => $name, is_active => $is_active, } );
    }
    $sth->finish();

    my %params = (
        'title'          => $self->{lh}->maketext( 'VBoxAdm Domain: [_1]', $domain_name ),
        'current'        => 'domains',
        'domain'         => $domain_name,
        'aliases'        => \@aliases,
        'mailboxes'      => \@mailboxes,
        'domain_aliases' => \@domain_aliases,
    );

    return $self->tt_process( 'domain.tpl', \%params );
}

sub show_create_domain {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    my %params = (
        'title'   => $self->{lh}->maketext('Add Domain'),
        'current' => 'domains',
    );

    return $self->tt_process( 'domain-create.tpl', \%params );
}

sub show_add_domain {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain             = &VBoxAdm::Utils::trim( lc( $q->param('domain') ) );
    my $create_domainadmin = $q->param('create_domainadmin');

    my $msg = '';
    if ( $domain && !&VBoxAdm::Utils::is_valid_domain_rfc822($domain) ) {
        $msg = $self->{lh}->maketext('Invalid syntax. Domain is not RFC822 compliant!');
        $self->add_message( 'error', $msg );
    }
    elsif ( $domain && $create_domainadmin ) {
        my $query = "INSERT INTO domains (name,is_active) VALUES(?,1)";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_add_domain - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );

        if ( $sth->execute($domain) ) {
            $msg = $self->{lh}->maketext( "Domain '[_1]' added", $domain );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_add_domain - Could not execute Query: %s, Args: %s, Error: %s', $query, $domain, $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to add Domain '[_1]'. Database error.", $domain );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();

    }
    else {
        $msg = $self->{lh}->maketext("Failed to add Domain. Insufficient parameters.");
        $self->add_message( 'error', $msg );
    }

    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domains' );
    return;
}

sub show_remove_domain {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_id = $q->param('domain_id');

    my $msg = '';
    if ($domain_id) {

        # get domain name for message
        my $query = 'SELECT name FROM domains WHERE id = ?';
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_id);
        my ($domain_name) = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM domains WHERE id = ?";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_remove_domain - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute($domain_id) ) {
            $msg = $self->{lh}->maketext( "Domain [_1] (#[_2]) removed", $domain_name, $domain_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_domain - Could not execute Query: %s, Args: %s, Error: %s', $query, $domain_id, $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Domain [_1] (#[_2]). Database error.", $domain_name, $domain_id );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();

    }
    else {
        $msg = $self->{lh}->maketext('Failed to remove domain. Insufficient Parameters.');
        $self->add_message( 'error', $msg );
    }

    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domains' );
    return;
}

sub show_update_domain {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_id = $q->param('domain_id');
    my $is_active = $q->param('is_active');

    my $msg = '';
    if ( $domain_id && defined($is_active) ) {

        # get domain name for message
        my $query = 'SELECT name FROM domains WHERE id = ?';
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_id);
        my ($domain_name) = $sth->fetchrow_array();
        $sth->finish();

        $query = "UPDATE domains SET is_active = ? WHERE id = ?";
        my @args = ();
        push( @args, $is_active );
        push( @args, $domain_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_domain - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ($is_active) {
            $status_str = 'enabled';
        }
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Domain [_1] (#[_2]) [_3].", $domain_name, $domain_id, $status_str );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_update_domain - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to set Domain [_1] (#[_2]) [_3].", $domain_name, $domain_id, $status_str );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();

    }
    else {
        $msg = $self->{lh}->maketext('Failed to update Domain. Insufficient parameters');
        $self->add_message( 'error', $msg );
    }

    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domains' );
    return;
}

#
# Domain Aliases
#

sub show_domain_aliases {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my $query = "FROM domain_aliases AS da LEFT JOIN domains AS d ON da.domain_id = d.id";
    $query .= ' WHERE 1 ';
    my @args = ();

    # Search
    if ($search) {
        $query .= "AND (da.name LIKE ? OR d.name LIKE ?) ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
        push( @args, $search_arg );
    }

    # Authorization
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND da.domain_id = ? ";
        push( @args, $self->get_users_domainid() );
    }

    my $sth = $dbh->prepare( 'SELECT COUNT(*) ' . $query )
      or syslog( 2, 'show_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    $sth = $dbh->prepare( 'SELECT da.id,da.name,da.is_active,d.name ' . $query . ' ORDER BY da.name LIMIT ?, ?' )
      or syslog( 2, 'show_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], target => $row[3], } );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Domain-Aliases'),
        'current' => 'domain_aliases',
        'domains' => \@domains,
        'search'  => $search,
        'page'    => $pager,
    );

    return $self->tt_process( 'domain-aliases.tpl', \%params );
}

sub show_create_domain_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT id,name,is_active FROM domains WHERE 1 ";
    my @args  = ();
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND id = ? ";
        push( @args, $self->get_users_domainid() );
    }
    $query .= "ORDER BY name";
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_create_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_create_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => $self->{lh}->maketext('Add Domain Alias'),
        'domains' => \@domains,
        'current' => 'domain_aliases',
    );

    return $self->tt_process( 'domain-alias-create.tpl', \%params );
}

sub show_add_domain_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_alias = &VBoxAdm::Utils::trim( lc( $q->param('domain_alias') ) );
    my $domain_id    = $q->param('domain');

    my $msg = '';
    if ( $domain_alias && !&VBoxAdm::Utils::is_valid_domain_rfc822($domain_alias) ) {
        $msg = $self->{lh}->maketext("Invalid syntax. Domain is not RFC822 compliant!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $domain_id && !$self->is_superadmin() && $self->is_domainadmin() && $domain_id != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        $msg = $self->{lh}->maketext("You are not authorized to modify this domain!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $domain_alias && $domain_id ) {
        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_id);
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "INSERT INTO domain_aliases (name,domain_id,is_active) VALUES(?,?,1)";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_add_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $domain_alias, $domain_id ) ) {
            $msg = $self->{lh}->maketext( "Added domain alias '[_1]' to domain [_2] (#[_3]).", $domain_alias, $domain_name, $domain_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog(
                2, 'show_add_domain_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $domain_alias, $domain_id ) ),
                $sth->errstr
            );
            $msg =
              $self->{lh}->maketext( "Failed to add domain alias '[_1]' to domain [_2] (#[_3]). Database Error.", $domain_alias, $domain_name, $domain_id );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();
    }
    else {
        $msg = $self->{lh}->maketext("Failed to add domain alias. No domain_alias or target domain given!");
        $self->add_message( 'error', $msg );
    }
    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domain_aliases' );
    return;
}

sub show_remove_domain_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_alias_id = $q->param('domain_alias_id');

    my $msg = '';
    if ($domain_alias_id) {
        my $query = "SELECT name FROM domain_aliases WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_alias_id);
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM domain_aliases WHERE id = ?";
        my @args = ();
        push( @args, $domain_alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_remove_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Domain-Alias [_1] (#[_2]) removed.", $domain_name, $domain_alias_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Domain-Alias [_1] (#[_2]). Database error.", $domain_name, $domain_alias_id );
            $self->add_message( 'error', $msg );
        }
    }
    else {
        $msg = $self->{lh}->maketext('Failed to remove domain alias. Insufficient parameters.');
        $self->add_message( 'error', $msg );
    }
    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domain_aliases' );
    return;
}

sub show_edit_domain_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_alias_id = $q->param('domain_alias_id');

    my $query = "SELECT id,name,is_active FROM domains WHERE 1 ";
    my @args  = ();

    # Authorization
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND id = ?";
        push( @args, $self->get_users_domainid() );
    }
    $query .= " ORDER BY name";
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_edit_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_edit_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }
    $sth->finish();

    $query = "SELECT da.id, da.name, da.domain_id, da.is_active, d.name FROM domain_aliases AS da ";
    $query .= "LEFT JOIN domains AS d ON da.domain_id = d.id WHERE da.id = ?";
    @args = ();
    push( @args, $domain_alias_id );
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND da.domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }
    $sth = $dbh->prepare($query);
    $sth->execute(@args);
    my @row = $sth->fetchrow_array();
    $sth->finish();

    my %params = (
        title           => $self->{lh}->maketext('Edit Domain Alias'),
        'current'       => 'domain_aliases',
        domain_name     => $row[1],
        is_active       => $row[3],
        target          => $row[2],
        domain_alias_id => $domain_alias_id,
        domains         => \@domains,
    );

    return $self->tt_process( 'domain-alias-edit.tpl', \%params );
}

sub show_update_domain_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_alias_id = $q->param('domain_alias_id');
    my $is_active       = $q->param('is_active');
    my $target          = $q->param('target');

    my $msg1        = '';
    my $domain_name = '';
    if ($domain_alias_id) {
        my $query = "SELECT name FROM domain_aliases WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_alias_id);
        $domain_name = $sth->fetchrow_array();
        $sth->finish();
    }

    if ( $domain_alias_id && defined($is_active) ) {
        my $query = "UPDATE domain_aliases SET is_active = ? WHERE id = ?";
        my @args  = ();
        push( @args, $is_active );
        push( @args, $domain_alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ( $is_active eq 'on' || $is_active eq 'true' ) {
            $status_str = 'enabled';
            $is_active  = 1;
        }
        if ( $sth->execute(@args) ) {
            my $msg = $self->{lh}->maketext( "Domain-Alias [_1] (#[_2]) $status_str.", $domain_name, $domain_alias_id );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_update_domain_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to set Domain-Alias [_1] (#[_2]) [_3]. Database Error.", $domain_name, $domain_alias_id, $status_str );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }

    if ( $target && !$self->is_superadmin() && $self->is_domainadmin() && $target != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        my $msg = "You are not authorized to modify this domain!";
        $self->add_message( 'errror', $msg );
        $msg1 .= $msg . ' ';
    }
    elsif ( $domain_alias_id && $target ) {
        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($target);
        my $target_domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "UPDATE domain_aliases SET domain_id = ? WHERE id = ?";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_update_domain_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $target, $domain_alias_id ) ) {
            my $msg =
              $self->{lh}
              ->maketext( "Domain-Alias [_1] (#[_2]) redirected to Domain [_3] (#[_4]).", $domain_name, $domain_alias_id, $target_domain_name, $target );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog(
                2, 'show_update_domain_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $target, $domain_alias_id ) ),
                $sth->errstr
            );
            my $msg =
              $self->{lh}
              ->maketext( "Failed to redirect Domain-Alias [_1] (#[_2]) to Domain [_3] (#[_4]).", $domain_name, $domain_alias_id, $target_domain_name,
                $target );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }
    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=domain_aliases' );
    return;
}

#
# Aliases
#

sub show_aliases {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my $query = "FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE 1 ";
    my @args  = ();
    if ($search) {
        $query .= "AND (a.local_part LIKE ? OR d.name LIKE ? OR a.goto LIKE ?) ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
        push( @args, $search_arg );
        push( @args, $search_arg );
    }
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND a.domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }

    my $sth = $dbh->prepare( 'SELECT COUNT(*) ' . $query )
      or syslog( 2, 'show_aliases - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_aliases - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    $sth = $dbh->prepare( 'SELECT a.id,a.local_part,a.is_active,a.goto,d.name ' . $query . ' ORDER BY a.local_part,d.name LIMIT ?,?' )
      or syslog( 2, 'show_aliases - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_aliases - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @aliases = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @aliases, { id => $row[0], local_part => $row[1], is_active => $row[2], target => $row[3], domain => $row[4], } );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Aliases'),
        'current' => 'aliases',
        'aliases' => \@aliases,
        'search'  => $search,
        'page'    => $pager,
    );

    return $self->tt_process( 'aliases.tpl', \%params );
}

sub show_create_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT id,name,is_active FROM domains WHERE 1 ";
    my @args  = ();
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND id = ? ";
        push( @args, $self->get_users_domainid() );
    }
    $query .= "ORDER BY name";
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_create_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_create_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => $self->{lh}->maketext('Add Alias'),
        'current' => 'aliases',
        'domains' => \@domains,
    );

    return $self->tt_process( 'alias-create.tpl', \%params );
}

sub show_add_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $local_part = &VBoxAdm::Utils::trim( lc( $q->param('local_part') ) );
    my $domain_id  = $q->param('domain');
    my $goto       = $q->param('goto');

    my $msg = '';

    if ( $domain_id && !$self->is_superadmin() && $self->is_domainadmin() && $domain_id != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        $msg = $self->{lh}->maketext("You are not authorized to modify this domain!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $local_part && !&VBoxAdm::Utils::is_valid_localpart_rfc822($local_part) ) {
        $msg = $self->{lh}->maketext("Invalid local part. This address is not RFC822 compliant!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $goto && !&VBoxAdm::Utils::is_valid_addresses_rfc822($goto) ) {
        $msg = $self->{lh}->maketext("Invalid address in destination!");
        $self->add_message( 'error', $msg );
    }
    elsif ( $local_part && $domain_id && $goto ) {
        my $query = "SELECT name FROM domains WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($domain_id);
        my $domain_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "INSERT INTO aliases (domain_id,local_part,goto,is_active) VALUES(?,?,?,1)";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_add_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $domain_id, $local_part, $goto ) ) {
            $msg = $self->{lh}->maketext( "Alias [_1] to [_2] added.", "$local_part\@$domain_name", $goto );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog(
                2, 'show_add_alias - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $domain_id, $local_part, $goto ) ),
                $sth->errstr
            );
            $msg = $self->{lh}->maketext( "Failed to add alias [_1] => [_2]. Database Error.", "$local_part\@$domain_name", $goto );
            $self->add_message( 'error', $msg );
        }
        $sth->finish();
    }
    else {
        $msg = $self->{lh}->maketext("Failed to add alias. Missing local_part, domain_id or target.");
        $self->add_message( 'error', $msg );
    }
    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=aliases' );
    return;
}

sub show_remove_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $alias_id = $q->param('alias_id');

    my $msg = '';

    if ($alias_id) {

        # get alias name for message
        my $query = 'SELECT CONCAT(a.local_part,\'@\',d.name) AS alias,a.goto FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?';
        my $sth   = $dbh->prepare($query);
        $sth->execute($alias_id);
        my ( $alias, $goto ) = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM aliases WHERE id = ?";
        my @args = ();
        push( @args, $alias_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_remove_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Alias [_1] => [_2] (#[_3]) removed.", $alias, $goto, $alias_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Alias [_1] => [_2] (#[_3]). Database Error.", $alias, $goto, $alias_id );
            $self->add_message( 'error', $msg );
        }
    }
    else {
        $msg = $self->{lh}->maketext('Failed to remove alias. Insufficient parameters.');
        $self->add_message( 'error', $msg );
    }
    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=aliases' );
    return;
}

sub show_edit_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $alias_id = $q->param('alias_id');

    my $query = "SELECT a.local_part,d.name,a.goto,a.is_active FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?";
    my @args  = ();
    push( @args, $alias_id );
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND a.domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_edit_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_edit_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my @row = $sth->fetchrow_array();

    my %params = (
        title      => $self->{lh}->maketext('Edit Alias'),
        alias_id   => $alias_id,
        local_part => $row[0],
        domain     => $row[1],
        'goto'     => $row[2],
        is_active  => $row[3],
        'current'  => 'aliases',
    );

    return $self->tt_process( 'alias-edit.tpl', \%params );
}

sub show_update_alias {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $alias_id  = $q->param('alias_id');
    my $is_active = $q->param('is_active');
    my $target    = &VBoxAdm::Utils::trim( $q->param('goto') );

    my $msg1       = '';
    my $alias_name = '';
    if ($alias_id) {
        my $query = "SELECT a.local_part,d.name FROM aliases AS a LEFT JOIN domains AS d ON a.domain_id = d.id WHERE a.id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($alias_id);
        $alias_name = $sth->fetchrow_array();
        $sth->finish();
    }

    if ( $alias_id && defined($is_active) ) {
        my $query = "UPDATE aliases SET is_active = ? WHERE id = ?";
        my @args  = ();
        push( @args, $is_active );
        push( @args, $alias_id );

        # Authorization
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_update_alias - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my $status_str = 'disabled';
        if ($is_active) {
            $status_str = 'enabled';
        }
        if ( $sth->execute(@args) ) {
            my $msg = $self->{lh}->maketext( "Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_update_alias - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to set Alias [_1] (#[_2]) [_3].", $alias_name, $alias_id, $status_str );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }

    # clean target string
    if ($target) {
        $target = join( ",", split( /\s*,\s*/, $target ) );
    }
    if ( $target && !&VBoxAdm::Utils::is_valid_addresses_rfc822($target) ) {
        my $msg = $self->{lh}->maketext("Invalid address in destination!");
        $self->add_message( 'error', $msg );
        $msg1 .= $msg . ' ';
    }
    elsif ( $alias_id && $target ) {
        my $query = "UPDATE aliases SET goto = ? WHERE id = ?";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_mailboxes - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute( $target, $alias_id ) ) {
            my $msg .= $self->{lh}->maketext( "Alias [_1] (#[_2]) redirected to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'success', $msg );
            $msg1 .= $msg . ' ';
        }
        else {
            syslog( 2, 'show_mailboxes - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", ( $target, $alias_id ) ), $sth->errstr );
            my $msg = $self->{lh}->maketext( "Failed to redirect Alias [_1] (#[_2]) to [_3].", $alias_name, $alias_id, $target );
            $self->add_message( 'error', $msg );
            $msg1 .= $msg . ' ';
        }
    }
    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=aliases' );
    return;
}

#
# Mailboxes
#

sub show_mailboxes {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my $query = "FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE 1 ";
    my @args  = ();

    # Search
    if ($search) {
        $query .= "AND (m.local_part LIKE ? OR d.name LIKE ? OR m.name LIKE ?) ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
        push( @args, $search_arg );
        push( @args, $search_arg );
    }

    # Authorization
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND m.domain_id = ? ";
        push( @args, $self->get_users_domainid() );
    }

    my $sth = $dbh->prepare( 'SELECT COUNT(*) ' . $query )
      or syslog( 2, 'show_mailboxes - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_mailboxes - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    $sth = $dbh->prepare(
        'SELECT m.id,m.local_part,m.is_active,d.name,m.max_msg_size,m.is_on_vacation,m.quota,m.name ' . $query . ' ORDER BY m.local_part,d.name LIMIT ?, ?' )
      or syslog( 2, 'show_mailboxes - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_mailboxes - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @mailboxes = ();
    while ( my @row = $sth->fetchrow_array() ) {
        my $msg_msg_size_mb = $row[4];
        if ( $msg_msg_size_mb > 0 ) {
            $msg_msg_size_mb /= 1024;
        }
        push(
            @mailboxes,
            {
                id              => $row[0],
                local_part      => $row[1],
                is_active       => $row[2],
                domain          => $row[3],
                max_msg_size_mb => $msg_msg_size_mb,
                is_on_vacation  => $row[5],
                quota           => $row[6],
                name            => $row[7],
            }
        );
    }
    $sth->finish();

    my %params = (
        'title'     => $self->{lh}->maketext('VBoxAdm Mailboxes'),
        'current'   => 'mailboxes',
        'mailboxes' => \@mailboxes,
        'search'    => $search,
        'page'      => $pager,
    );

    return $self->tt_process( 'mailboxes.tpl', \%params );
}

sub show_create_mailbox {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    my $query = "SELECT id,name,is_active FROM domains WHERE 1 ";
    my @args  = ();

    # Authorization
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND id = ? ";
        push( @args, $self->get_users_domainid() );
    }
    $query .= "ORDER BY name";
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_create_mailbox - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_create_mailbox - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @domains = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @domains, { id => $row[0], name => $row[1], is_active => $row[2], } );
    }

    my %params = (
        'title'   => $self->{lh}->maketext('Add Mailbox'),
        'domains' => \@domains,
        'current' => 'mailboxes',
    );

    return $self->tt_process( 'mailbox-create.tpl', \%params );
}

sub show_add_mailbox {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $domain_id         = $q->param('domain');
    my $username          = &VBoxAdm::Utils::trim( lc( $q->param('username') ) );
    my $password          = $q->param('password');
    my $password_2        = $q->param('password_2');
    my $name              = $q->param('name');
    my $is_active         = $q->param('is_active');
    my $send_welcome_mail = $q->param('send_welcome_mail');
    my $msg_max_size_mb   = $q->param('max_msg_size_mb');
    $msg_max_size_mb ||= 15;    # default to 15 MB
    my $max_msg_size   = $msg_max_size_mb * 1024;
    my $sa_active      = $q->param('sa_active') || 1;
    my $sa_kill_score  = $q->param('sa_kill_score') || 6.31;
    my $is_superadmin  = 0;
    my $is_domainadmin = 0;
    my $pwscheme       = $self->{config}{'cgi'}{'pwscheme'} || 'ssha256';

    if ( $is_active && $is_active eq 'on' ) {
        $is_active = 1;
    }

    my $system_domain = $self->{config}{'default'}{'domain'} || 'localhost';

    if ( $self->is_superadmin() ) {
        $is_superadmin = $q->param('is_superadmin') || 0;
    }
    elsif ( $self->is_domainadmin() && $domain_id == $self->get_users_domainid() ) {
        $is_domainadmin = $q->param('is_domainadmin') || 0;
    }

    my $msg1        = '';
    my $domain_name = 'localhost';
    if ($domain_id) {
        $domain_name = $self->get_domain_byid($domain_id) || 'localhost';
    }

    # no pws given, generate one
    if ( !$password && !$password_2 ) {
        $password = Crypt::GeneratePassword::word( 8, 12 );
        $password_2 = $password;
        my $msg = 'Generated Password: [_1]. ';
        $self->add_message( 'info', $self->{lh}->maketext( $msg, $password ) );
    }

    if ( $domain_id && !$self->is_superadmin() && $self->is_domainadmin() && $domain_id != $self->get_users_domainid() ) {

        # if domainadmin, verify that its his domain
        my $msg = "You are not authorized to modify this domain!";
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $msg1 = $msg;
    }
    elsif ( $username && !&VBoxAdm::Utils::is_valid_localpart_rfc822($username) ) {
        my $msg = "Invalid local part. This address is not RFC822 compliant!";
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $msg1 = $msg;
    }
    elsif ( $password && $password_2 && $password ne $password_2 ) {
        my $msg = "Passwords do not match.";
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $msg1 = $msg;
    }
    elsif ( $domain_id && $username && $password && $name && $password eq $password_2 ) {
        my $query =
          "INSERT INTO mailboxes (domain_id,local_part,password,is_active,name,sa_active,sa_kill_score,is_domainadmin,is_superadmin) VALUES(?,?,?,?,?,?,?,?,?)";
        my $sth = $dbh->prepare($query)
          or syslog( 2, 'show_add_mailbox - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if (
            $sth->execute(
                $domain_id, $username, VBoxAdm::DovecotPW::make_pass( $password, $pwscheme ),
                $is_active, $name, $sa_active, $sa_kill_score, $is_domainadmin, $is_superadmin
            )
          )
        {
            my $msg = "Added Mailbox [_1] for [_2].";
            $self->add_message( 'success', $self->{lh}->maketext( $msg, "$username\@$domain_name", $name ) );
            $msg1 .= $self->{lh_en}->maketext( $msg, "$username\@$domain_name", $name );

            # send_welcome_mail
            my $emsg = '';
            $emsg .= "Subject: " . $self->{lh}->maketext("Welcome") . "\r\n";
            $emsg .= "Auto-Submitted: auto-generated\r\n";
            $emsg .= "From: VBoxAdm <vboxadm\@" . $system_domain . ">\r\n";
            $emsg .= "To: <$username\@$domain_name>\r\n";
            $emsg .= "\r\n";
            $emsg .= $self->{lh}->maketext("Welcome to your new mailbox.");
            &VBoxAdm::Utils::sendmail( 'vboxadm@' . $system_domain, $emsg );
        }
        else {
            syslog(
                2, 'show_add_mailbox - Could not execute Query: %s, Args: %s, Error: %s',
                $query, join( "-", ( $domain_id, $username, $password, $is_active ) ),
                $sth->errstr
            );
            my $msg = "Failed to add Mailbox [_1] for [_2]. Database Error.";
            $self->add_message( 'error', $self->{lh}->maketext( $msg, "$username\@$domain_name", $name ) );
            $msg1 = $self->{lh_en}->maketext( $msg, "$username\@$domain_name", $name );
        }
        $sth->finish();
    }
    else {
        my $msg = "Failed to add Mailbox. Insufficient parameters.";
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $msg1 = $msg;
    }

    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=mailboxes' );
    return;
}

sub show_remove_mailbox {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $mailbox_id = $q->param('mailbox_id');

    my $msg = '';

    if ($mailbox_id) {
        my $query = "SELECT CONCAT(m.local_part,'\@',d.name) FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($mailbox_id);
        my $mailbox_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM mailboxes WHERE id = ?";
        my @args = ();
        push( @args, $mailbox_id );
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @args, $self->get_users_domainid() );
        }
        $sth = $dbh->prepare($query)
          or syslog( 2, 'show_remove_mailbox - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute(@args) ) {
            $msg = $self->{lh}->maketext( "Mailbox [_1] (#[_2]) removed.", $mailbox_name, $mailbox_id );
            $self->add_message( 'success', $msg );
        }
        else {
            syslog( 2, 'show_remove_mailbox - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
            $msg = $self->{lh}->maketext( "Failed to remove Mailbox [_1] (#[_2]). Database Error.", $mailbox_name, $mailbox_id );
            $self->add_message( 'error', $msg );
        }
    }
    else {
        $msg = $self->{lh}->maketext("Failed to remove mailbox. Insufficient parameters.");
        $self->add_message( 'error', $msg );
    }

    $self->log( $msg . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=mailboxes' );
    return;
}

sub show_edit_mailbox {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $mailbox_id = $q->param('mailbox_id');

    my $query = "SELECT m.local_part,d.name,m.name,m.is_active,m.max_msg_size,";
    $query .= "m.is_on_vacation,m.vacation_msg,m.quota,m.is_domainadmin,";
    $query .= "m.is_superadmin,d.id,m.sa_active,m.sa_kill_score,m.vacation_subj,m.vacation_start,m.vacation_end ";
    $query .= "FROM mailboxes AS m LEFT JOIN domains AS d ";
    $query .= "ON m.domain_id = d.id WHERE m.id = ? ";
    my @args = ();
    push( @args, $mailbox_id );
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND m.domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }
    my $sth = $dbh->prepare($query)
      or syslog( 2, 'show_edit_mailbox - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_edit_mailbox - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my @row = $sth->fetchrow_array();
    $sth->finish();

    my $max_msg_size_mb = $row[4];
    if ( $max_msg_size_mb > 0 ) {
        $max_msg_size_mb /= 1024;
    }

    my $domain_id = $row[10];

    # show aliases pointing to this mbox, don't forget domain aliases!
    # show cc (aliases w/ the same name as this mailbox)
    $query = "SELECT id,goto FROM aliases WHERE local_part = (SELECT local_part FROM mailboxes WHERE id = ?) AND domain_id = ? ";
    @args  = ();
    push( @args, $mailbox_id );
    push( @args, $domain_id );
    if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
        $query .= "AND domain_id = ?";
        push( @args, $self->get_users_domainid() );
    }
    $sth = $dbh->prepare($query);
    $sth->execute(@args);
    my ( $cc_id, $cc_goto ) = $sth->fetchrow_array();
    $sth->finish();

    my $vacation_start = '';
    if ( $row[14] =~ m/(\d\d\d\d)-(\d\d)-(\d\d)/ ) {
        $vacation_start = "$3.$2.$1";
    }
    my $vacation_end = '';
    if ( $row[15] =~ m/(\d\d\d\d)-(\d\d)-(\d\d)/ ) {
        $vacation_end = "$3.$2.$1";
    }

    my %params = (
        title              => $self->{lh}->maketext('Edit Mailbox'),
        mailbox_id         => $mailbox_id,
        local_part         => $row[0],
        domain             => $row[1],
        name               => $row[2],
        is_active          => $row[3],
        max_msg_size_mb    => $max_msg_size_mb,
        is_on_vacation     => $row[5],
        vacation_msg       => $row[6],
        vacation_subj      => $row[13],
        vacation_start     => $vacation_start,
        vacation_end       => $vacation_end,
        quota              => $row[7],
        cc_goto            => $cc_goto,
        cc_id              => $cc_id,
        mb_is_domainadmin  => $row[8],
        mb_is_superadmin   => $row[9],
        user_is_superadmin => $self->is_superadmin(),
        sa_active          => $row[11],
        sa_kill_score      => $row[12],
        'current'          => 'mailboxes',
    );

    return $self->tt_process( 'mailbox-edit.tpl', \%params );
}

sub show_update_mailbox {
    my $self = shift;

    if ( !$self->is_superadmin() && !$self->is_domainadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $mailbox_id      = $q->param('mailbox_id');
    my $password        = $q->param('password');
    my $password_2      = $q->param('password_2');
    my $name            = $q->param('name');
    my $is_active       = $q->param('is_active');
    my $msg_max_size_mb = $q->param('max_msg_size_mb');
    $msg_max_size_mb ||= 15;    # default to 15 MB
    my $max_msg_size   = $msg_max_size_mb * 1024;
    my $is_on_vacation = $q->param('is_on_vacation');
    my $vacation_msg   = $q->param('vacation_msg');
    my $vacation_subj  = $q->param('vacation_subj');
    my $vacation_start = $q->param('vacation_start');
    my $vacation_end   = $q->param('vacation_end');
    my $is_domainadmin = $q->param('is_domainadmin');
    my $is_superadmin  = $q->param('is_superadmin');
    my $sa_active      = $q->param('sa_active');
    my $sa_kill_score  = $q->param('sa_kill_score');
    my $pwscheme       = $self->{config}{'cgi'}{'pwscheme'} || 'ssha256';

    my $msg1 = '';

    if ($mailbox_id) {
        my $query = "SELECT CONCAT(m.local_part,'\@',d.name) FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($mailbox_id);
        my $mailbox_name = $sth->fetchrow_array();
        $sth->finish();

        $query = "UPDATE mailboxes SET ";

        # only execute query if scalar(@params) > 0, i.e. at least on valid option
        my @params = ();

        # Password
        if ( $password && $password_2 ) {

            $Data::Password::MINLEN = 8;
            $Data::Password::MAXLEN = undef;

            # passwords must be equal and at least 8 chars long
            if ( $password eq $password_2 ) {

                # Check password length
                if ( length($password) < 8 ) {
                    my $msg = 'Bad password - Password too short. Need at least 8 characters.';
                    $self->add_message( 'warning', $self->{lh}->maketext($msg) );
                    $msg1 .= $msg . ' ';
                }

                # Check password strength
                if ( my $str = Data::Password::IsBadPassword($password) ) {
                    my $msg = $self->{lh}->maketext( 'Weak password - [_1].', $str );
                    $self->add_message( 'warning', $msg );
                    $msg1 .= $msg . ' ';
                }
                $query .= "password = ?, ";
                push( @params, VBoxAdm::DovecotPW::make_pass( $password, $pwscheme ) );
            }
        }

        # Name
        if ($name) {
            $query .= "name = ?, ";
            push( @params, $name );
        }

        # Is_Active
        # checkboxes are undefined if they are false!
        my $status_str = 'disabled';
        if ($is_active) {
            $status_str = 'enabled';
            $is_active  = 1;
        }
        else {
            $is_active = 0;
        }
        $query .= "is_active = ?, ";
        push( @params, $is_active );

        # Max Msg Size
        if ( defined($max_msg_size) ) {
            $query .= "max_msg_size = ?, ";
            push( @params, $max_msg_size );
        }

        # Is Superadmin / Is Domainadmin
        if ( $self->is_superadmin() ) {
            $query .= "is_superadmin = ?, ";
            if ( defined($is_superadmin) && $is_superadmin eq 'on' ) {
                push( @params, 1 );
            }
            else {
                push( @params, 0 );
            }
            $query .= "is_domainadmin = ?, ";
            if ( defined($is_domainadmin) && $is_domainadmin eq 'on' ) {
                push( @params, 1 );
            }
            else {
                push( @params, 0 );
            }
        }

        # SpamAssassin
        if ( defined($sa_kill_score) ) {
            $query .= "sa_kill_score = ?, ";
            push( @params, $sa_kill_score );
            if ( $sa_kill_score > 10 ) {
                $self->add_message( 'warning', $self->{lh}->maketext('SpamAssassin kill score probably set too high! Should be below 10.') );
            }
            elsif ( $sa_kill_score < 5 ) {
                $self->add_message( 'warning', $self->{lh}->maketext('SpamAssassin kill score probably set too low! Should be above 5.') );
            }
        }
        if ( defined($sa_active) ) {
            $sa_active = 1;
        }
        else {
            $sa_active = 0;
        }
        push( @params, $sa_active );
        $query .= "sa_active = ?, ";

        # Is_On_Vacation / Vacation Msg
        if ( defined($is_on_vacation) && $is_on_vacation eq 'on' ) {
            if ( $vacation_subj && length($vacation_subj) && $vacation_msg && length($vacation_msg) > 1 ) {
                $is_on_vacation = 1;
            }
            else {
                $self->add_message( 'warning', $self->{lh}->maketext('Attempt to enable Vacation w/o vacation message or subject denied!') );
            }
            if ( $vacation_start && $vacation_start =~ m/^\s*(\d\d)\.(\d\d)\.(\d\d\d\d)\s*$/ ) {
                $vacation_start = "$3-$2-$1";
            }
            else {
                $vacation_start = '0000-00-00';
                $self->add_message( 'warning', $self->{lh}->maketext('Invalid vacation start date!') );
            }
            if ( $vacation_end && $vacation_end =~ m/^\s*(\d\d)\.(\d\d)\.(\d\d\d\d)\s*$/ ) {
                $vacation_end = "$3-$2-$1";
            }
            else {
                $vacation_end = '0000-00-00';
                $self->add_message( 'warning', $self->{lh}->maketext('Invalid vacation end date!') );
            }
            $query .= "is_on_vacation = ?, vacation_msg = ?, vacation_subj = ?, vacation_start = ?, vacation_end = ? ";
            push( @params, $is_on_vacation );
            push( @params, $vacation_msg );
            push( @params, $vacation_subj );
            push( @params, $vacation_start );
            push( @params, $vacation_end );
        }
        else {
            $is_on_vacation = 0;
            $vacation_start = '0000-00-00';
            $vacation_end   = '0000-00-00';
            $query .= "is_on_vacation = ?, vacation_start = ?, vacation_end = ? ";
            push( @params, $is_on_vacation );
            push( @params, $vacation_start );
            push( @params, $vacation_end );
        }

        # finialize query
        $query .= " WHERE id = ?";
        push( @params, $mailbox_id );

        # if domainadmin, verify that its his domain
        if ( !$self->is_superadmin() && $self->is_domainadmin() ) {
            $query .= "AND domain_id = ?";
            push( @params, $self->get_users_domainid() );
        }

        # at least on option has changed
        if ( scalar(@params) > 1 ) {
            my $sth = $dbh->prepare($query)
              or syslog( 2, 'show_update_mailbox - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );

            if ( $sth->execute(@params) ) {
                my $msg = $self->{lh}->maketext( "Updated Mailbox [_1] (#[_2]).", $mailbox_name, $mailbox_id );
                $self->add_message( 'success', $msg );
                $msg1 .= $msg . ' ';
            }
            else {
                syslog( 2, 'show_update_mailbox - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @params ), $sth->errstr );
                my $msg = $self->{lh}->maketext( "Failed to update Mailbox [_1] (#[_2]). Database Error.", $mailbox_name, $mailbox_id );
                $self->add_message( 'error', $msg );
                $msg1 .= $msg . ' ';
            }
        }
        else {
            my $msg = "No Parameter changed. ";
            $self->add_message( 'error', $self->{lh}->maketext($msg) );
            $msg1 .= $msg . ' ';
        }
    }
    else {
        my $msg = "Failed to update Mailbox. No Mailbox-ID given. ";
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $msg1 .= $msg . ' ';
    }

    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=mailboxes' );
    return;
}

#
# Log
#

sub show_log {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my @args  = ();
    my $query = "FROM log ";
    if ($search) {
        $query .= "WHERE msg LIKE ? ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
    }
    $query .= "ORDER BY ts DESC";

    # Get number of entries for pager
    my $sth = $dbh->prepare( 'SELECT COUNT(*) ' . $query )
      or syslog( 2, 'show_log - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute(@args)
      or syslog( 2, 'show_log - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    # Get the actual data
    $sth = $dbh->prepare( 'SELECT ts,msg ' . $query . ' LIMIT ?, ?' )
      or syslog( 2, 'show_log - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_log - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", @args ), $sth->errstr );

    my @log = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push( @log, { ts => $row[0], msg => $row[1], } );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Log'),
        'current' => 'log',
        'log'     => \@log,
        'search'  => $search,
        'page'    => $pager,
    );

    return $self->tt_process( 'log.tpl', \%params );
}

#
# Vacation Blacklist
#
sub show_vacation_blacklist {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $search = $q->param('search') || undef;

    my @args  = ();
    my $query = "SELECT id,local_part,domain FROM vacation_blacklist ";
    if ($search) {
        $query .= "WHERE CONCAT(local_part,'\@',domain) LIKE ? ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
    }
    $query .= "ORDER BY domain,local_part";
    my $sth = $dbh->prepare($query);
    $sth->execute(@args);
    my @blacklist = ();
    while ( my ( $id, $local_part, $domain ) = $sth->fetchrow_array() ) {
        push(
            @blacklist,
            {
                'id'         => $id,
                'local_part' => $local_part,
                'domain'     => $domain,
            }
        );
    }
    $sth->finish();

    my %params = (
        'title'     => $self->{lh}->maketext('VBoxAdm Vacation Blacklist'),
        'current'   => 'vacation',
        'blacklist' => \@blacklist,
        'search'    => $search,
    );

    return $self->tt_process( 'vacation_blacklist.tpl', \%params );
}

sub show_create_vacbl_entry {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Vacation Blacklist - Create Entry'),
        'current' => 'vacation',
    );

    return $self->tt_process( 'vacation-blacklist-add.tpl', \%params );
}

sub show_add_vacbl_entry {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $email = $q->param('email') || undef;

    my $msg1 = '';

    if ( $email && &VBoxAdm::Utils::is_valid_address_rfc822($email) ) {
        my $query = "INSERT INTO vacation_blacklist (local_part,domain) VALUES(?,?)";
        my $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_add_vacbl_entry - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        my ( $local_part, $domain ) = split /@/, $email;
        if ( $sth->execute( $local_part, $domain ) ) {
            $sth->finish();
            my $msg = "Added Vacation Blacklist Entry [_1].";
            $self->add_message( 'success', $self->{lh}->maketext( $msg, $email ) );
            $msg1 .= $self->{lh_en}->maketext( $msg, $email );
        }
        else {
            syslog( 2, 'show_add_vacbl_entry - Could not execute Query: %s, Args: %s, Error: %s', $query, join( "-", ( $local_part, $domain ) ), $sth->errstr );
            my $msg = "Failed to add Vacation Blacklist Entry [_1]. Database Error.";
            $self->add_message( 'error', $self->{lh}->maketext( $msg, $email ) );
            $msg1 = $self->{lh_en}->maketext( $msg, $email );
        }
    }
    else {
        my $msg = 'Invalid email given. Please provide a valid RFC822 email address.';
        $msg1 .= $msg;
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
    }

    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=vac_bl' );
    return;
}

sub show_remove_vacbl_entry {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $entry_id = $q->param('entry_id') || undef;

    my $msg1 = '';

    if ($entry_id) {
        my $query = "SELECT local_part,domain FROM vacation_blacklist WHERE id = ?";
        my $sth   = $dbh->prepare($query);
        $sth->execute($entry_id);
        my $email = $sth->fetchrow_array();
        $sth->finish();

        $query = "DELETE FROM vacation_blacklist WHERE id = ?";
        $sth   = $dbh->prepare($query)
          or syslog( 2, 'show_remove_vacbl_entry - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
        if ( $sth->execute($entry_id) ) {
            $sth->finish();
            my $msg = "Delete Vacation Blacklist Entry [_1].";
            $self->add_message( 'success', $self->{lh}->maketext( $msg, $email ) );
            $msg1 .= $self->{lh_en}->maketext( $msg, $email );
        }
        else {
            syslog( 2, 'show_remove_vacbl_entry - Could not execute Query: %s, Args: %s, Error: %s', $query, $entry_id, $sth->errstr );
            my $msg = "Failed to remove Vacation Blacklist Entry [_1]. Database Error.";
            $self->add_message( 'error', $self->{lh}->maketext( $msg, $email ) );
            $msg1 .= $self->{lh_en}->maketext( $msg, $email );
        }
    }
    else {
        my $msg = 'Invalid id given. Please provide a valid id.';
        $msg1 .= $msg;
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
    }

    $self->log( $msg1 . ". User: " . $self->authen->username );
    $self->redirect( $self->{base_url} . '?rm=vac_bl' );
    return;
}

#
# Auto-Whitelist
#
sub show_awl {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $search = $q->param('search') || undef;

    my @args  = ();
    my $query = "SELECT id,email,last_seen,disabled FROM awl ";
    if ($search) {
        $query .= "WHERE email LIKE ? ";
        $search =~ s/%//g;
        my $search_arg = "%" . $search . "%";
        push( @args, $search_arg );
    }
    $query .= "ORDER BY email";
    my $sth = $dbh->prepare($query);
    $sth->execute(@args);
    my @awl = ();
    while ( my ( $id, $email, $last_seen, $disabled ) = $sth->fetchrow_array() ) {
        push(
            @awl,
            {
                'id'        => $id,
                'email'     => $email,
                'last_seen' => $last_seen,
                'disabled'  => $disabled,
            }
        );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Auto-Whitelist'),
        'current' => 'awl',
        'awl'     => \@awl,
        'search'  => $search,
    );

    return $self->tt_process( 'awl.tpl', \%params );
}

sub show_update_awl {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get CGI Query object
    my $q = $self->query();

    # Get our database connection
    my $dbh = $self->dbh();

    my $entry_id = $q->param('entry_id') || undef;
    my $disabled = $q->param('disabled');

    if ( $entry_id && defined($disabled) ) {
        if ( $disabled =~ m/^(?:yes|1|true|on)$/i ) {
            $disabled = 1;
        }
        else {
            $disabled = 0;
        }
        my $query = "UPDATE awl SET disabled = ? WHERE id = ?";
        if ( my $sth = $dbh->prepare($query) ) {
            $sth->execute( $disabled, $entry_id );
            $sth->finish();
        }
        else {
            my $msg = "Unable to update awl. Database Error.";
            $self->add_message( 'error', $self->{lh}->maketext($msg) );
            $msg .= " DBI-Errstr: " . DBI->errstr;
            $self->log( $msg . ". User: " . $self->authen->username );
        }
    }

    $self->redirect( $self->{base_url} . '?rm=awl' );
    return;
}

#
# Admins
#

sub show_admins {
    my $self = shift;

    if ( !$self->is_superadmin() ) {
        my $msg = "You are not authorized to access this page.";
        $self->log( $msg . ". User: " . $self->authen->username );
        $self->add_message( 'error', $self->{lh}->maketext($msg) );
        $self->redirect( $self->{base_url} . '?rm=welcome' );
        return;
    }

    # Get our database connection
    my $dbh = $self->dbh();

    # Get CGI Query object
    my $q = $self->query();

    my $search = $q->param('search') || undef;
    my $page   = $q->param('page')   || 1;

    my @args  = ();
    my $query = "FROM mailboxes AS m LEFT JOIN domains AS d ON m.domain_id = d.id WHERE m.is_superadmin ";
    $query .= "OR m.is_domainadmin ORDER BY m.is_superadmin,m.is_domainadmin,m.local_part,d.name";
    my $sth = $dbh->prepare( "SELECT COUNT(*) " . $query )
      or syslog( 2, 'show_admins - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    $sth->execute()
      or syslog( 2, 'show_admins - Could not execute Query: %s, Args: none, Error: %s', $query, $sth->errstr );
    my $num_rows = $sth->fetchrow_array();
    $sth->finish();

    my $pager = Data::Page->new();
    $pager->total_entries($num_rows);
    $pager->entries_per_page($ENTRIES_PER_PAGE);
    $pager->current_page($page);

    $sth = $dbh->prepare( "SELECT m.id,m.local_part,m.is_active,d.name,m.is_domainadmin,m.is_superadmin " . $query . ' LIMIT ?, ?' )
      or syslog( 2, 'show_admins - Could not prepare Query: %s, Error: %s', $query, DBI->errstr );
    push( @args, $pager->skipped );
    push( @args, $pager->entries_per_page );
    $sth->execute(@args)
      or syslog( 2, 'show_admins - Could not execute Query: %s, Args: none, Error: %s', $query, $sth->errstr );

    my @admins = ();
    while ( my @row = $sth->fetchrow_array() ) {
        push(
            @admins,
            {
                id             => $row[0],
                local_part     => $row[1],
                is_active      => $row[2],
                domain         => $row[3],
                is_domainadmin => $row[4],
                is_superadmin  => $row[5],
            }
        );
    }
    $sth->finish();

    my %params = (
        'title'   => $self->{lh}->maketext('VBoxAdm Admins'),
        'current' => 'admins',
        'admins'  => \@admins,
        'search'  => $search,
        'page'    => $pager,
    );

    return $self->tt_process( 'admins.tpl', \%params );
}

1;

__END__

=head1 NAME

VBoxAdm::Frontend - Frontend for VBoxAdm

=head1 VERSION

This documentation refers to VBoxAdm::Frontend version @VERSION@
built on @BUILDDATE@.

=head1 SYNOPSIS

    use VBoxAdm::Frontend;
		my $vadm = VBoxAdm::Frontend->new();
		$vadm->run();

=head1 DESCRIPTION

A full description of the module and its features.
May include numerous subsections (i.e., =head2, =head3, etc.).

=head1 SUBROUTINES/METHODS

A separate section listing the public components of the module's interface.
These normally consist of either subroutines that may be exported, or methods
that may be called on objects belonging to the classes that the module provides.
Name the section accordingly.

In an object-oriented module, this section should begin with a sentence of the
form "An object of this class represents...", to give the reader a high-level
context to help them understand the methods that are subsequently described.

=head1 DIAGNOSTICS

A list of every error and warning message that the module can generate
(even the ones that will "never happen"), with a full explanation of each
problem, one or more likely causes, and any suggested remedies.
(See also "Documenting Errors" in Chapter 13.)

=head1 CONFIGURATION AND ENVIRONMENT

A full explanation of any configuration system(s) used by the module,
including the names and locations of any configuration files, and the
meaning of any environment variables or properties that can be set. These
descriptions must also include details of any configuration language used.
(See also "Configuration Files" in Chapter 19.)

=head1 DEPENDENCIES

A list of all the other modules that this module relies upon, including any
restrictions on versions, and an indication of whether these required modules are
part of the standard Perl distribution, part of the module's distribution,
or must be installed separately.

=head1 INCOMPATIBILITIES

A list of any modules that this module cannot be used in conjunction with.
This may be due to name conflicts in the interface, or competition for
system or program resources, or due to internal limitations of Perl
(for example, many modules that use source code filters are mutually
incompatible).

=head1 BUGS AND LIMITATIONS

A list of known problems with the module, together with some indication of
whether they are likely to be fixed in an upcoming release.

Also a list of restrictions on the features the module does provide:
data types that cannot be handled, performance issues and the circumstances
in which they may arise, practical limitations on the size of data sets,
special cases that are not (yet) handled, etc.

There are no known bugs in this module.
Please report problems to 

Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
