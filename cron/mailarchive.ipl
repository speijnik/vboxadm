#!/usr/bin/perl
use strict;
use warnings;

use DBI;
use Config::Std;
use Getopt::Long;
use Sys::Syslog;

use VBoxAdm::DB '@VERSION@';

my ( $conffile_used, @hooks, %hook, %config, );

# Valid config file locations to try
my @conffile_locations = qw(
  vboxadm.conf
  conf/vboxadm.conf
  /etc/vboxadm.conf
  /etc/vboxadm/vboxadm.conf
);

GetOptions(
    'sender|s=s'    => \$config{'sender'},
    'recipient|r=s' => \$config{'recipient'},
    'verbose|v+'    => \$config{'verbose'},
    'create!'       => \$config{'create'},

    # shift removes name of the option (config) and leaves the value for unshift
    # unshift prepends to the list of valid config files so it is tried first
    'config=s' => sub { shift; unshift( @conffile_locations, @_ ); },
) or &usage();

# Try all config file locations
foreach my $loc (@conffile_locations) {
    if ( -r $loc ) {
        $conffile_used = $loc;
        read_config $loc => %config;
        last;
    }
}

openlog( 'vboxadm-mailarchive', 'ndelay,nofatal', 'mail' );

# Determine options
my $dbhost = $config{'default'}{'dbhost'} || 'localhost';
my $dbuser = $config{'default'}{'dbuser'} || 'vboxadm';
my $dbpass = $config{'default'}{'dbpass'} || 'vboxadm';
my $dbport = $config{'default'}{'dbport'} || 3306;
my $dbdb   = $config{'default'}{'dbdb'}   || 'vboxadm';
$config{'vacation'}{'notify_interval'} ||= 3600 * 24 * 7;
$config{'awl'}{'lifetime'} ||= 365;

my $dsn = "DBI:mysql:host=$dbhost;database=$dbdb;port=$dbport;user=$dbuser;password=$dbpass";
my $dbh = &VBoxAdm::DB::connect($dsn);

if ( !$dbh ) {
    syslog( 2, 'Could not connect to database with DSN $dsn - Exiting' );
    closelog();
    die("Could not connect to database with DSN $dsn");
}

&create_archive_tables( $dbh, \%config );
if ( !$config{'create'} ) {
    &optimize_archive_tables( $dbh, \%config );
    &expire_archive_tables( $dbh, \%config );
    &sign_archive( $dbh, \%config );
}

$dbh->disconnect();
closelog();
exit 0;

###########################################################################
# Subs
###########################################################################
############################################
# Usage      : &optimize_archive_tables($dbh,$config);
# Purpose    : Compact all archive tables
# Returns    : Always true
# Parameters : None
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub optimize_archive_tables {
    my $dbh    = shift;
    my $config = shift;

    my $sql = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'archive_%'";
    my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql )
      or return;
    while ( my $table = $sth->fetchrow_array() ) {
        my $sql = "OPTIMIZE TABLE $table";
        my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql );
    }
    $sth->finish();
    return 1;
}
############################################
# Usage      : &expire_archive_table($dbh,$config);
# Purpose    : Drop expired archive tables
# Returns    : Always true.
# Parameters : DBH, config hashref.
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub expire_archive_tables {
    my $dbh    = shift;
    my $config = shift;

    # default to 10 years
    my $holdback = $config{'mailarchive'}{'holdback'} || 10;

    # enforce at least 5 years
    if ( $holdback < 5 ) {
        $holdback = 5;
    }
    my $sql = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME LIKE 'archive_%'";
    my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql )
      or return;
    while ( my $table = $sth->fetchrow_array() ) {
        if ( $table =~ m/^archive_(\d{4})_(\d{2})$/ ) {
            my ( $year, $month ) = ( $1, $2 );
            my $current_year = ( localtime(time) )[5];
            if ( $year < $current_year - $holdback ) {
                my $sql = "DROP TABLE $table";
                my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql );
                $sth->finish();
                syslog( 2, "Dropped expired table $table after $holdback years." );
            }
        }
    }
    $sth->finish();
    return 1;
}
############################################
# Usage      : &sign_archive($dbh,$config);
# Purpose    : Sign checksums of archived
# Returns    :
# Parameters : None
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub sign_archive {
    my $dbh    = shift;
    my $config = shift;

    # TODO implement
    # - sign archived mails
    # - write to signature table
    # http://search.cpan.org/~vipul/Crypt-RSA-1.57/lib/Crypt/RSA.pm
    # http://search.cpan.org/~iroberts/Crypt-OpenSSL-RSA-0.26/RSA.pm

=begin sample
use Digest::SHA;
use Crypt::OpenSSL::RSA;
use MIME::Base64;

my $digest    = Digest::SHA->new(256);
my $rsa = Crypt::OpenSSL::RSA->generate_key(1024);
my $data = "Test";
$digest->add($data);
my $checksum = $digest->hexdigest();
my $signature = $rsa->sign($checksum); # length always 64
my $signb64 = MIME::Base64::encode($signature); # length always 175

print "Data: $data\n";
print "Checksum: $checksum\n";
print "Signature: ".MIME::Base64::encode($signature)."\n";
if($rsa->verify($checksum,$signature)) {
	print "Signature valid!\n";
} else {
	print "Signature INVALID!\n";
}
=cut

}
############################################
# Usage      : &create_archive_tables($dbh, $config);
# Purpose    : Create all necessary archive tables in advance.
# Returns    : Always true.
# Parameters : DBH, Config hashref.
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub create_archive_tables {
    my $dbh    = shift;
    my $config = shift;

    # holdback time in years
    my $holdback_years = $config->{'mailarchive'}{'holdback'} || 10;
    my ( $sec, $min, $hour, $dom, $mon, $year, $wday, $yday, $isdst ) = localtime(time);
    $year += 1900;
    $mon++;

    my $dbdb = $config->{'mailarchive'}{'dbdb'} || $config->{'default'}{'dbdb'};

    # Create the Monthly/Yearly archive tables
    # We always make sure to create the tables for the current and the next year
    if ( $config->{'mailarchive'}{'rotate'} && $config->{'mailarchive'}{'rotate'} eq 'monthly' ) {
        for my $y ( $year .. $year + 1 ) {
            for my $m ( 1 .. 12 ) {
                &create_archive_table( $dbh, $y, $m )
                  or syslog( 2, 'Failed to create archive table for ' . $y . '-' . $m );
            }
        }
    }
    else {
        for my $y ( $year .. $year + 1 ) {
            &create_archive_table( $dbh, $y, 1 )
              or syslog( 2, 'Failed to create archive table for ' . $y . '-01' );
        }
    }

    # Create the signature table(s)
    &create_signature_table($dbh);

    # Create the metadata tables(s)
    &create_metadata_table($dbh);

    return 1;
}

sub create_signature_table {
    my $dbh = shift;

    # TODO implement

=begin sql
CREATE TABLE IF NOT EXISTS `archive_signatures` (
`id` BIGINT( 64 ) NOT NULL AUTO_INCREMENT PRIMARY KEY ,
`table` CHAR( 15 ) NOT NULL ,
`fk` BIGINT( 64 ) NOT NULL ,
`checksum` CHAR( 64 ) NOT NULL ,
`signature` CHAR( 175 ) NOT NULL ,
`key_id` INT( 16 ) NOT NULL
) ENGINE = ARCHIVE;
=cut

    return;
}

sub create_metadata_table {
    my $dbh = shift;

    # TODO implement
    return;
}
############################################
# Usage      : &create_archive_table($dbh, $year, $month);
# Purpose    : Create an archive table for the given year and month.
# Returns    : True if the table was created.
# Parameters : None
# Throws     : no exceptions
# Comments   : none
# See Also   : n/a
sub create_archive_table {
    my $dbh   = shift;
    my $year  = shift;
    my $month = shift;
    my $table = sprintf( "archive_%04d_%02d", $year, $month );
    my $sql   = 'CREATE TABLE IF NOT EXISTS `';
    $sql .= $table;

    # body type must be longtext, which should allow up to 4G of data
    $sql .= '` (
  `id` bigint(64) NOT NULL AUTO_INCREMENT,
  `checksum` char(20) NOT NULL,
  `body` longtext NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=ARCHIVE DEFAULT CHARSET=utf8;';
    my $sth = &VBoxAdm::DB::prepexec( $dbh, $sql )
      or return;
    syslog( 2, "Created archive table $table" );
    $sth->finish();
    return 1;
}

__END__

=head1 NAME

mailarchive - perform misc. regular cleanup jobs.

=head1 VERSION

This documentation refers to VBoxAdm mailarchive version @VERSION@
built on @BUILDDATE@.

=head1 DESCRIPTION

This script implements severl regular maintenance jobs.

=head1 CONFIGURATION AND ENVIRONMENT

The configuration file should be place either in /etc/vboxadm.conf or
in /etc/vboxadm/vboxadm.conf. This is a common configuration file
for the whole suite of VBoxAdm applications. Each part of this suite
has its own section in the config file and all use the values
from the default section when appropriate.

=head2 default
The default section should contain at least the database configuration.

dbuser - The user used to connect to the MySQL database.
dbpass - This users password.
dbdb - The db used by this application.
dbhost - The MySQL database host, usually localhost.

=head1 DEPENDENCIES

VBoxAdm::Utils, DBI.

=head1 INCOMPATIBILITIES

None known.

=head1 BUGS AND LIMITATIONS

There are no known bugs in this module.
Please report problems to Dominik Schulz (dominik.schulz@gauner.org)
Patches are welcome.

=head1 AUTHOR

Dominik Schulz (dominik.schulz@gauner.org)

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2010 Dominik Schulz (dominik.schulz@gauner.org). All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
